#include <iostream>

using namespace std;

//
// cpp 中的 野指针
// ---------------------------------------------------
// > 野指针说的是指针变量指向的不是一个有效(合法)的地址
//   程序中如果访问了野指针，可能会导致程序崩溃
// -----------------
// > 程序中出现野指针的情况一般可能为以下的几种情况
//   1. 指针在定义的时候，没有进行初始化，它的值是不确定的(指向的值没有实际意义)
//   2. 用指针指向了动态分配的内存,内存被释放后,指针不会置空,但地址已经失效
//   3. 指针指向的变量已经超越了变量的作用域(变量的内存空间已经被系统回收)
// -----------------
// > 规避野指针
//   1. 指针在定义的时候，如果没地方指, 就初始化为 nullptr
//   2. 动态分配的内存被释放后，将其置为 nullptr
//   3. 函数不要返回局部变量的地址.
//
//  注意野指针的危害比空指针大很多，在程序中，如果访问野指针，可能会造成程序的崩溃
//  但是可能，不是一定，程序的表现不稳定，增加了调试难度.
//


int *getpointer() {
  int a = 3;
  cout << "a=" << a << ", &a= " << &a << endl;
  // 建议不要返回局部变量的地址(编译的时候会有警告，尽可能避免这种用法)
  return &a;
}

void wild_point_appear() {

  // 1.直接使用一个乱写的内存地址
  // 来访问它 segmentation fault (表示程序异常退出)
  // int *p = (int *)0x0000099433333;
  // cout << "P=" << *p << endl;

  // 2. 定义一个没有初始化的指针
  // int *p;
  // cout << "P=" << p << "*p="<< *p << endl;

  // 3. 内存被释放
  //  int* p = new int(10);
  // delete p;
  // cout << "P=" << p << "*p="<< *p << endl;

  // 4. 指针指向的变量超越了作用域
  // 多发生于函数的调用的时候

  int *p = getpointer();
  cout << "p = " << p << ", *p=" << *p << endl;
}

int main() {

  wild_point_appear();

  return 0;
}
