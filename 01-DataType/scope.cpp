
// -------------------------------------------------------------------------
// cpp 变量的作用域(主要有五种)
// -------------------------------------------------------------------------
//  > 1. 定义在函数之外的变量是全局变量
//  > 2. 头文件中定义的变量是全局变量
//
//  =====> 全局变量在程序的全生命周期中都是有效的, 一般全局变量定义在整个文件
//         的头部位置，所有函数之上, 这样它在所有函数中才是可用的
//         (需要满足先定义，后使用的规则)
//
//  > 3. 在函数内部定义的变量属于局部变量，只能在当前函数作用域内使用
//  > 4. 在函数内部使用 static 关键字修饰的变量是局部静态变量
//       (只会初始化一次, 其生命周期与主程序相同, 作用域被限定在函数内部)
//
//
#include <iostream>
using namespace std;

int a = 10;
int b;
char c;
bool d;
double e;
string f;

void global_variable() {
  // 全局变量在定义后，任意地方都可以使用
  cout << "ga: " << a << endl;
  // 局部变量可以域全局变脸同名，这时候程序会就近使用局部变量而忽略全局变量
  int a = 100;
  cout << "la: " << a << endl;

  // 如果此时不想要默认的就近规则，就是想要访问全局的变量, 使用 ::a 
  cout << "ga: " << ::a << endl;
}

// 静态局部变量的作用域更小，使用的优先级比全局变量要高
// 能不使用全局变量的地方尽量不要使用，方便维护.
void static_variable() {
  // 静态变量自动初始化为 0,
  static int value;

  // 局部变量不会自动初始化，其值是不确定的, 需要手动初始化
  // 程序中应该有初始化局部变量的代码，程序可能会报错或者出现非预期的结果
  // 不同的编译器不同.
  int val = 0;

  cout << "static value : " << ++value << ", val : " << ++val << endl;
}

int main() {

  // 全局变量和静态变量会自动初始化,
  // 整数, char, double 初始化为0,
  // bool, string 初始化没有值
  cout << b << c << d << ":" << e << f << endl;

  global_variable();

  // 内部的 value 不会每次都初始化为 10，
  // 而是在运行期初始化一次，后续对该值的改变都会保留
  static_variable();
  static_variable();
  static_variable();

  return 0;
}
